diff --git a/node_modules/@lodestar/prover/lib/utils/evm.js b/node_modules/@lodestar/prover/lib/utils/evm.js
index f209dff..e864cbc 100644
--- a/node_modules/@lodestar/prover/lib/utils/evm.js
+++ b/node_modules/@lodestar/prover/lib/utils/evm.js
@@ -35,7 +35,6 @@ export async function getVMWithState({ rpc, executionPayload, tx, vm, logger, })
         data: tx.input ? tx.input : tx.data,
         value: tx.value,
         gas: tx.gas ? tx.gas : numberToHex(gasLimit),
-        gasPrice: "0x0",
     });
     const response = await rpc.request("eth_createAccessList", [accessListTx, blockHashHex], { raiseError: false });
     if (!isValidResponse(response) || response.result.error) {
diff --git a/node_modules/@lodestar/prover/lib/utils/validation.js b/node_modules/@lodestar/prover/lib/utils/validation.js
index 8ff336a..c65fb5b 100644
--- a/node_modules/@lodestar/prover/lib/utils/validation.js
+++ b/node_modules/@lodestar/prover/lib/utils/validation.js
@@ -1,7 +1,7 @@
 import { Block } from "@ethereumjs/block";
 import { RLP } from "@ethereumjs/rlp";
 import { Trie } from "@ethereumjs/trie";
-import { Account, KECCAK256_NULL_S } from "@ethereumjs/util";
+import { Account, KECCAK256_NULL_S, equalsBytes } from "@ethereumjs/util";
 import { keccak256 } from "ethereum-cryptography/keccak.js";
 import { blockDataFromELBlock, bufferToHex, hexToBuffer, padLeft } from "./conversion.js";
 import { getChainCommon } from "./execution.js";
@@ -26,7 +26,7 @@ export async function isValidAccount({ address, stateRoot, proof, logger, }) {
             storageRoot: proof.storageHash,
             codeHash: proof.codeHash,
         });
-        return account.serialize().equals(expectedAccountRLP ? expectedAccountRLP : emptyAccountSerialize);
+        return equalsBytes(account.serialize(), expectedAccountRLP ? expectedAccountRLP : emptyAccountSerialize);
     }
     catch (err) {
         logger.error("Error verifying account proof", undefined, err);
@@ -43,7 +43,7 @@ export async function isValidStorageKeys({ storageKeys, proof, logger, }) {
             // buffer.equals is not compatible with Uint8Array for browser
             // so we need to convert the output of RLP.encode to Buffer first
             const isStorageValid = (!expectedStorageRLP && sp.value === "0x0") ||
-                (!!expectedStorageRLP && expectedStorageRLP.equals(Buffer.from(RLP.encode(sp.value))));
+                (!!expectedStorageRLP && equalsBytes(expectedStorageRLP, RLP.encode(sp.value)));
             if (!isStorageValid)
                 return false;
         }
@@ -70,7 +70,7 @@ export async function isValidBlock({ executionPayload, block, logger, config, })
         return false;
     }
     const common = getChainCommon(config.PRESET_BASE);
-    common.setHardforkByBlockNumber(executionPayload.blockNumber, undefined, executionPayload.timestamp);
+    common.setHardforkBy({ blockNumber: executionPayload.blockNumber, timestamp: executionPayload.timestamp })
     const blockObject = Block.fromBlockData(blockDataFromELBlock(block), { common });
     if (!(await blockObject.validateTransactionsTrie())) {
         logger.error("Block transactions could not be verified.", {
