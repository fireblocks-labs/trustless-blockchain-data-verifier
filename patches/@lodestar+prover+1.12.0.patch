diff --git a/node_modules/@lodestar/prover/lib/utils/conversion.js b/node_modules/@lodestar/prover/lib/utils/conversion.js
index f96ad5d..697a06b 100644
--- a/node_modules/@lodestar/prover/lib/utils/conversion.js
+++ b/node_modules/@lodestar/prover/lib/utils/conversion.js
@@ -15,7 +15,7 @@ export function bufferToHex(buffer) {
     return "0x" + Buffer.from(buffer).toString("hex");
 }
 export function hexToBuffer(val) {
-    return Buffer.from(val.replace("0x", ""), "hex");
+    return Buffer.from((val.length % 2 ? "0" : "") + val.replace("0x", ""), "hex");
 }
 export function padLeft(v, length) {
     const buf = Buffer.alloc(length);
diff --git a/node_modules/@lodestar/prover/lib/utils/evm.js b/node_modules/@lodestar/prover/lib/utils/evm.js
index 1fdc555..c44186a 100644
--- a/node_modules/@lodestar/prover/lib/utils/evm.js
+++ b/node_modules/@lodestar/prover/lib/utils/evm.js
@@ -32,7 +32,7 @@ export async function getVMWithState({ rpc, executionPayload, tx, vm, logger, })
     const accessListTx = cleanObject({
         to,
         from,
-        data: tx.data,
+        data: tx.input? tx.input : tx.data,
         value: tx.value,
         gas: tx.gas ? tx.gas : numberToHex(gasLimit),
         gasPrice: "0x0",
diff --git a/node_modules/@lodestar/prover/lib/utils/validation.js b/node_modules/@lodestar/prover/lib/utils/validation.js
index b5454bc..a46412d 100644
--- a/node_modules/@lodestar/prover/lib/utils/validation.js
+++ b/node_modules/@lodestar/prover/lib/utils/validation.js
@@ -1,7 +1,7 @@
 import { Block } from "@ethereumjs/block";
 import { RLP } from "@ethereumjs/rlp";
 import { Trie } from "@ethereumjs/trie";
-import { Account, KECCAK256_NULL_S } from "@ethereumjs/util";
+import { Account, KECCAK256_NULL_S, equalsBytes } from "@ethereumjs/util";
 import { keccak256 } from "ethereum-cryptography/keccak.js";
 import { blockDataFromELBlock, bufferToHex, hexToBuffer, padLeft } from "./conversion.js";
 import { getChainCommon } from "./execution.js";
@@ -26,7 +26,7 @@ export async function isValidAccount({ address, stateRoot, proof, logger, }) {
             storageRoot: proof.storageHash,
             codeHash: proof.codeHash,
         });
-        return account.serialize().equals(expectedAccountRLP ? expectedAccountRLP : emptyAccountSerialize);
+        return equalsBytes(account.serialize(), expectedAccountRLP ? expectedAccountRLP : emptyAccountSerialize);
     }
     catch (err) {
         logger.error("Error verifying account proof", undefined, err);
@@ -43,7 +43,7 @@ export async function isValidStorageKeys({ storageKeys, proof, logger, }) {
             // buffer.equals is not compatible with Uint8Array for browser
             // so we need to convert the output of RLP.encode to Buffer first
             const isStorageValid = (!expectedStorageRLP && sp.value === "0x0") ||
-                (!!expectedStorageRLP && expectedStorageRLP.equals(Buffer.from(RLP.encode(sp.value))));
+                (!!expectedStorageRLP && equalsBytes(expectedStorageRLP, RLP.encode(sp.value)));
             if (!isStorageValid)
                 return false;
         }
@@ -56,7 +56,7 @@ export async function isValidStorageKeys({ storageKeys, proof, logger, }) {
 }
 export async function isValidBlock({ executionPayload, block, logger, config, }) {
     const common = getChainCommon(config.PRESET_BASE);
-    common.setHardforkByBlockNumber(executionPayload.blockNumber, undefined, executionPayload.timestamp);
+    common.setHardforkBy({ blockNumber: executionPayload.blockNumber, timestamp: executionPayload.timestamp })
     const blockObject = Block.fromBlockData(blockDataFromELBlock(block), { common });
     if (bufferToHex(executionPayload.blockHash) !== bufferToHex(blockObject.hash())) {
         logger.error("Block hash does not match", {
